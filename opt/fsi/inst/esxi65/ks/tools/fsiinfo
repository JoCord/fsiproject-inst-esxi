#!/bin/sh
#
#   get esxi infos an generate info files for fsi
#
#   This program is free software; you can redistribute it and/or modify it under the 
#   terms of the GNU General Public License as published by the Free Software Foundation;
#   either version 3 of the License, or (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
#   without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
#   See the GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License along with this program; 
#   if not, see <http://www.gnu.org/licenses/>.
#
ver="1.0.31 - 1.12.2016"
retc=0
export ls="  "
progname=`basename $0`

esxiver="none"
esximver="none"

if [ -f /store/fsi/viconf.sh ]; then
   . /store/fsi/viconf.sh
else
   echo "ERROR: cannot locate /store/fsi/viconf.sh - abort"
   exit 77
fi
if [ -f /store/fsi/fsifunc.sh ]; then
   . /store/fsi/fsifunc.sh
else
   echo "ERROR: cannot locate /store/fsi/fsifunc.sh - abort"
   exit 55
fi
   
logfile=$vipath/fsiinfo.log
   
help() {
   echo
   echo " Help for $progname - $ver"    
   echo
   echo " create info files for fsi portal"
   echo
   echo "  Parameter:"
   echo "   -n                 generate new info files"
   echo
   echo "  Optional Parameter:"
   echo "   -q                 quiet mode"
   echo "   -0                 info mode"
   echo "   -1                 debug mode"
   echo "   -2                 trace mode"
   echo "   -l <logfile>       other logfile"
   echo
   echo "  Return Code:"
   echo "    1 = help"
   echo "    2 = no pool "
   echo "    > = different meaning"
   echo
   echo "  Example:"
   echo "    $progname -n"
   echo
}


quietmode=""
go=1

while getopts ":nl:hq012" optname; do
   #tracemsg "Option $optname has value $OPTARG"
   case "$optname" in
      "h")
         help
         exit 1
        ;;
      "q")
         export deb2scr="no"
         quietmode=" -q "
         debmsg " quiet mode"
        ;;
      "0")
         export deb2scr="yes"
         export debug="info"
         quietmode=" -0 "
         debmsg " info mode"
        ;;
      "1")
         export deb2scr="yes"
         export debug="debug"
         quietmode=" -1 "
         debmsg " debug mode"
        ;;
      "2")
         export deb2scr="yes"
         export debug="trace"
         quietmode=" -2 "
         debmsg " trace mode"
        ;;
      "l")
         export logfile="$OPTARG"
         debmsg " log: $logfile"
        ;;
      "n")
         go=0
        ;;
      "?")
        errmsg "Unknown option $OPTARG"
        ;;
      ":")
        errmsg "No argument value for option $OPTARG"
        ;;
      *)
      # Should not occur
        errmsg "Unknown error while processing options"
        ;;
   esac
done

if [ $go -eq 1 ] ; then
   help
   exit 1
fi

infmsg "$ls Start $progname $ver"

if [ "$esxiver" == "none" ]; then
   export esxiver=$(vmware -v | awk '{print $3}')
   echo export esxiver=$esxiver >>$viconf
fi
   
if [ "$esximver" == "none" ]; then
   case "$esxiver" in
      "4"*)
         export esximver=4
        ;;
      "5"*)
         export esximver=5
        ;;
      "6"*)
         export esximver=6
        ;;
      *)
         export esximver="unknown"
         errmsg "unsupported esxi version - abort"
         exit 99
        ;;
   esac
   echo export esximver=$esximver >>$viconf
fi



tracemsg "$ls  ESXi ver: $esxiver"
tracemsg "$ls  ESXi main version: $esximver"
   
tracemsg "$ls  check if volume already mounted"
ismounted
mounted=$?

if [ $mounted -eq 0 ]; then
   infmsg "$ls  vi temp server install dir not mounted - mount now ..."
   . /store/fsi/fsimount
else
   infmsg "$ls  vi temp srv inst already mounted"
fi

if [ $retc -eq 0 ]; then
   tracemsg "$ls  vi info path: $viinfopath"
   if [ ! -d $viinfopath ]; then
      debmsg "$ls  no $viinfopath exist - create it"
      mkdir $viinfopath > /dev/null 2>&1
      retc=$?
      if [ $retc -ne 0 ]; then
         errmsg "cannot create info dir in log dir [$viinfopath]"
      fi
   fi
fi

if [ $retc -eq 0 ]; then
   srvinfopath="$viinfopath/"$(hostname -f)
   tracemsg "$ls  server info path: $srvinfopath"
   
   if [ -d $srvinfopath ]; then
      debmsg "$ls  old info path exist - delete it"
      rm -Rf $srvinfopath/* > /dev/null 2>&1
      retc=$?
      if [ $retc -ne 0 ]; then
         errmsg "cannot delete content of $srvinfopath"
      else
         rmdir $srvinfopath  > /dev/null 2>&1
         if [ $retc -ne 0 ]; then
            errmsg "cannot delete content of $srvinfopath"
         fi
      fi
   fi
fi

if [ $retc -eq 0 ]; then
   if [ ! -d $srvinfopath ]; then
      debmsg "$ls  create $srvinfopath ..."
      mkdir $srvinfopath > /dev/null 2>&1
      retc=$?
      if [ $retc -ne 0 ]; then
         errmsg "cannot create server info dir in log dir [$srvinfopath]"
      fi
   fi
fi

if [ $retc -eq 0 ]; then
   tracemsg "$ls  start creating information files on fsi server"

   debmsg "$ls   get nic info"
   esxcfg-nics -l >$srvinfopath/nics

   printf "%-10s %-10s %-20s %-20s \n" "nic" "driver" "driver version" "firmware" >$srvinfopath/nicsdetail
   
   debmsg "$ls   get nic firmware info"
   for i in $(esxcfg-nics -l | awk '{print $1}' | tail -n +2); do 
      
      if [ $esximver -eq 5 ] || [ $esximver -eq 6 ]; then
         vmnicdetail=$(esxcli network nic get -n $i)
         # tracemsg "$ls   $vmnicdetail"
         # tracemsg "$ls   nic: $i"
         driver=$(echo $vmnicdetail | sed -e 's/^.*Driver: \([^ ,]*\).*$/\1/')
         # tracemsg "$ls   driver: $driver"
         driverver=$(echo $vmnicdetail | sed -e 's/^.* Version: \([^ ,]*\).*$/\1/')
         # tracemsg "$ls   driver version $driverver"
         firmware=$(echo $vmnicdetail | sed -e 's/^.* Firmware Version: \([^ ,]*\).*$/\1/')
         #tracemsg "$ls   firmware: $firmware"      
         printf "%-10s %-10s %-20s %-20s \n" $i "$driver" "$driverver" "$firmware" >>$srvinfopath/nicsdetail
         # tracemsg "$ls   $i $driver $driverver $firmware"

      elif [ $esximver -eq 4 ]; then
         vmnicdetail=$(ethtool -i $i)
         # tracemsg "$ls   $vmnicdetail"
         # tracemsg "$ls   nic: $i"
         driver=$(echo $vmnicdetail | sed -e 's/^.*driver: \([^ ,]*\).*$/\1/')
         # tracemsg "$ls   driver: $driver"
         driverver=$(echo $vmnicdetail | sed -e 's/^.* version: \([^ ,]*\).*$/\1/')
         # tracemsg "$ls   driver version $driverver"
         firmware=$(echo $vmnicdetail | sed -e 's/^.*firmware-version: \([^,]*\).*bus-info:.*$/\1/')
         #tracemsg "$ls   firmware: $firmware"      
         printf "%-10s %-10s %-20s %-20s \n" $i "$driver" "$driverver" "$firmware" >>$srvinfopath/nicsdetail
         # tracemsg "$ls   $i $driver $driverver $firmware"
         
      else
         echo "unsupported esxi version [$esximver]" >$srvinfopath/syslog
      fi
   done 
   
   debmsg "$ls   get vmkernel config"
   esxcfg-vmknic -l >$srvinfopath/vmknics
   
   debmsg "$ls   get vswitch info"
   esxcfg-vswitch -l >$srvinfopath/vswitch
   
   debmsg "$ls   get default route"
   esxcfg-route >$srvinfopath/route
   
   debmsg "$ls   get datastore mounted info"
   esxcfg-nas -l >$srvinfopath/datastore
   echo >>$srvinfopath/datastore
   df -h >>$srvinfopath/datastore
   
   # debmsg "$ls   get all info in perl formated"
   # esxcfg-info -a -F perl >$srvinfopath/info.perl

   debmsg "$ls   get syslog config"
   if [ $esximver -eq 5 ] || [ $esximver -eq 6 ]; then
      debmsg "$ls   esxi $esximver esxcli use"
      esxcli system syslog config get >$srvinfopath/syslog
   elif [ $esximver -eq 4 ]; then
      debmsg "$ls   esxi 4 vim-cmd use"
      # sysloghost=$(vim-cmd hostsvc/advopt/view Syslog.Remote.Hostname value | grep -i "value =" | awk '{print $3}' | sed 's/"//g' | sed 's/,//g')
      sysloghost=$(vim-cmd hostsvc/advopt/view Syslog.Remote.Hostname | grep -i "value =" | awk -F'"' '{print $2}')
      if [ "$sysloghost" == "" ]; then
         sysloghost="no syslog host configure"
      else
         sysloghost="syslog host: $sysloghost"
      fi
      echo $sysloghost >$srvinfopath/syslog
      
      scratchlog=$(vim-cmd hostsvc/advopt/view Syslog.Local.DatastorePath | grep -i "value =" | awk -F'"' '{print $2}')
      if [ "$scratchlog" == "" ]; then
         scratchlog="no scratch log configure"
      else
         scratchlog="Scratch Location: $scratchlog"
      fi
      echo $scratchlog >>$srvinfopath/syslog
      
      sysport=$(vim-cmd hostsvc/advopt/view Syslog.Remote.Port | grep "value =" | sed -e 's/^.*value = \([^ ,]*\).*$/\1/')
      if [ "$sysport" == "" ]; then
         sysport="no syslog port found"
      else
         sysport="Syslog Port: $sysport"
      fi
      echo $sysport  >>$srvinfopath/syslog
      
   else
      echo "unsupported esxi version [$esximver]" >$srvinfopath/syslog
   fi

   debmsg "$ls   get patch info"
   if [ $esximver -eq 5 ] || [ $esximver -eq 6 ]; then
      debmsg "$ls   esxi $esximver esxcli use"
      esxcli software vib list | tail -n+3 >$srvinfopath/patchlvl
      esxcli software vib list | head -n1 >$srvinfopath/patchhead
   elif [ $esximver -eq 4 ]; then
      debmsg "$ls   esxi 4 esxupdate use"
      /usr/sbin/esxupdate --all query | tail -n+2 >$srvinfopath/patchlvl
      /usr/sbin/esxupdate --all query | head -n1 >$srvinfopath/patchhead
   else
      echo "unsupported esxi version [$esximver]" >$srvinfopath/patchlvl
   fi
      



   debmsg "$ls   get service status"
   if [ $esximver -eq 6 ]; then
      /etc/init.d/ESXShell status >$srvinfopath/servicestat
      /etc/init.d/SSH status >>$srvinfopath/servicestat
      /etc/init.d/DCUI status >>$srvinfopath/servicestat
      /etc/init.d/cdp status >>$srvinfopath/servicestat
      /etc/init.d/dcbd status >>$srvinfopath/servicestat
      /etc/init.d/hostd status >>$srvinfopath/servicestat
      /etc/init.d/lacp status >>$srvinfopath/servicestat
      /etc/init.d/lbtd status >>$srvinfopath/servicestat
      echo -n "lwsmd is "  >>$srvinfopath/servicestat
      /etc/init.d/lwsmd status  >>$srvinfopath/servicestat
      /etc/init.d/memscrubd status >>$srvinfopath/servicestat
      /etc/init.d/ntpd status >>$srvinfopath/servicestat
      /etc/init.d/rhttpproxy status >>$srvinfopath/servicestat
      /etc/init.d/sensord status >>$srvinfopath/servicestat
      /etc/init.d/sfcbd status >>$srvinfopath/servicestat
      echo -n "sfcbd-watchdog is " >>$srvinfopath/servicestat
      /etc/init.d/sfcbd-watchdog status >>$srvinfopath/servicestat
      /etc/init.d/slpd status >>$srvinfopath/servicestat
      /etc/init.d/smartd status >>$srvinfopath/servicestat
      /etc/init.d/snmpd status >>$srvinfopath/servicestat
      /etc/init.d/storageRM status >>$srvinfopath/servicestat
      /etc/init.d/usbarbitrator status >>$srvinfopath/servicestat
      /etc/init.d/vobd status >>$srvinfopath/servicestat
      /etc/init.d/vprobed status >>$srvinfopath/servicestat
      /etc/init.d/vpxa status >>$srvinfopath/servicestat
      /etc/init.d/wsman status >>$srvinfopath/servicestat
      /etc/init.d/xorg status  >>$srvinfopath/servicestat
   elif [ $esximver -eq 5 ]; then
      /etc/init.d/ESXShell status >$srvinfopath/servicestat
      /etc/init.d/SSH status >>$srvinfopath/servicestat
      /etc/init.d/DCUI status >>$srvinfopath/servicestat
      /etc/init.d/cdp status >>$srvinfopath/servicestat
      /etc/init.d/dcbd status >>$srvinfopath/servicestat
      /etc/init.d/hostd status >>$srvinfopath/servicestat
      # /etc/init.d/iked status >>$srvinfopath/servicestat
      /etc/init.d/lacp status >>$srvinfopath/servicestat
      /etc/init.d/lbtd status >>$srvinfopath/servicestat
      echo -n "lsassd is " >>$srvinfopath/servicestat
      /etc/init.d/lsassd status >>$srvinfopath/servicestat
      echo -n "lwiod is " >>$srvinfopath/servicestat
      /etc/init.d/lwiod status >>$srvinfopath/servicestat
      /etc/init.d/memscrubd status >>$srvinfopath/servicestat
      echo -n "netlogond is " >>$srvinfopath/servicestat
      /etc/init.d/netlogond status >>$srvinfopath/servicestat
      /etc/init.d/ntpd status >>$srvinfopath/servicestat
      /etc/init.d/rhttpproxy status >>$srvinfopath/servicestat
      /etc/init.d/sensord status >>$srvinfopath/servicestat
      /etc/init.d/sfcbd status >>$srvinfopath/servicestat
      echo -n "sfcbd-watchdog is " >>$srvinfopath/servicestat
      /etc/init.d/sfcbd-watchdog status >>$srvinfopath/servicestat
      /etc/init.d/slpd status >>$srvinfopath/servicestat
      /etc/init.d/smartd status >>$srvinfopath/servicestat
      /etc/init.d/snmpd status >>$srvinfopath/servicestat
      /etc/init.d/storageRM status >>$srvinfopath/servicestat
      /etc/init.d/usbarbitrator status >>$srvinfopath/servicestat
      /etc/init.d/vmamqpd status >>$srvinfopath/servicestat
      /etc/init.d/vobd status >>$srvinfopath/servicestat
      /etc/init.d/vprobed status >>$srvinfopath/servicestat
      /etc/init.d/vpxa status >>$srvinfopath/servicestat
      /etc/init.d/wsman status >>$srvinfopath/servicestat
      /etc/init.d/xorg status  >>$srvinfopath/servicestat
   elif [ $esximver -eq 4 ]; then
      /etc/init.d/TSM status >$srvinfopath/servicestat
      /etc/init.d/TSM-SSH status >>$srvinfopath/servicestat
      /etc/init.d/ntpd status >>$srvinfopath/servicestat
      /etc/init.d/DCUI status >>$srvinfopath/servicestat
      /etc/init.d/iked status >>$srvinfopath/servicestat
      /etc/init.d/lbtd status >>$srvinfopath/servicestat
      echo -n "lsassd is " >>$srvinfopath/servicestat
      /etc/init.d/lsassd status >>$srvinfopath/servicestat
      echo -n "lwiod is " >>$srvinfopath/servicestat
      /etc/init.d/lwiod status >>$srvinfopath/servicestat
      echo -n "netlogond is " >>$srvinfopath/servicestat
      /etc/init.d/netlogond status >>$srvinfopath/servicestat
      /etc/init.d/sensord status >>$srvinfopath/servicestat
      /etc/init.d/sfcbd status >>$srvinfopath/servicestat
      echo -n "sfcbd-watchdog is " >>$srvinfopath/servicestat
      /etc/init.d/sfcbd-watchdog status >>$srvinfopath/servicestat
      /etc/init.d/slpd status >>$srvinfopath/servicestat
      /etc/init.d/storageRM status >>$srvinfopath/servicestat
      /etc/init.d/vobd status >>$srvinfopath/servicestat
      /etc/init.d/vprobed status >>$srvinfopath/servicestat
      /etc/init.d/wsman status >>$srvinfopath/servicestat
   else
      echo "unsupported esxi version [$esximver]" >$srvinfopath/servicestat
   fi
   
   debmsg "$ls   get memory"
   if [ $esximver -eq 5 ] || [ $esximver -eq 6 ]; then
      esxcli hardware memory get | grep -m 1 -i physical |  awk -F': ' '{print $2}' | awk -F' ' '{print $1}' >$srvinfopath/mem
   elif [ $esximver -eq 4 ]; then   
      /bin/enum_instances CIM_PhysicalMemory | grep -m 1 -i Capacity | awk -F' = ' '{print $2}' >$srvinfopath/mem
   else
      echo "unsupported esxi version [$esximver]" >$srvinfopath/mem
   fi
   
   debmsg "$ls   get cpu"
   vim-cmd hostsvc/hostsummary | grep -i cpumodel | awk -F' = ' '{print $2}' | awk -F',' '{print $1}' | sed 's/"//g' | sed 's/  */ /g' >$srvinfopath/cpu_model
   vim-cmd hostsvc/hostsummary | grep -i cpumhz | awk -F' = ' '{print $2}' | awk -F',' '{print $1}' >$srvinfopath/cpu_mhz
   vim-cmd hostsvc/hostsummary | grep -i cputhreads | awk -F' = ' '{print $2}' | awk -F',' '{print $1}' >$srvinfopath/cpu_threads
   vim-cmd hostsvc/hostsummary | grep -i numcpupkgs | awk -F' = ' '{print $2}' | awk -F',' '{print $1}' >$srvinfopath/cpu_pkgs
   vim-cmd hostsvc/hostsummary | grep -i numcpucores | awk -F' = ' '{print $2}' | awk -F',' '{print $1}' >$srvinfopath/cpu_cores
   
   
   debmsg "$ls   get uptime"
   uptime >$srvinfopath/uptime

   debmsg "$ls   get vmware version info"
   vmware -v >$srvinfopath/version

   debmsg "$ls   get ntp info"
   cat /etc/ntp.conf >$srvinfopath/ntp
   
   debmsg "$ls   get date info"
   date >$srvinfopath/testtime
   
   if [ -f /store/fsi/viconf.sh ]; then
      debmsg "$ls   get vi configs"
      cat /store/fsi/viconf.sh >>$srvinfopath/viconf.sh
   else
      warnmsg "$ls   cannot find viconf.sh on this server"
   fi
   
   debmsg "$ls   get license"
   vim-cmd vimsvc/license --show | grep -i "serial:" | awk '{print $2}' >$srvinfopath/license
   debmsg "$ls   get key"
   vim-cmd vimsvc/license --show | grep -i "vmodl key: " | awk -F': ' '{print $2}' >$srvinfopath/prodkey
   
   debmsg "$ls   get prod name"
   vim-cmd vimsvc/license --show | grep -i "name: " | awk -F': ' '{print $2}' >$srvinfopath/prodname
   
   debmsg "$ls   get role root permissions"
   vim-cmd vimsvc/auth/entity_permissions vim.Folder:ha-folder-root | awk '/ principal =/ {print $3}' | sed 's/,//;s/"//g' | sort >$srvinfopath/locroleperm
   
   # RoleID 10 Name rausfinden
   # vim-cmd vimsvc/auth/roles | grep -A 3 -i "roleId = 10" | awk '/ name =/ {print $3}'| sed 's/,//;s/"//g'
   
   debmsg "$ls   get local roles"
   vim-cmd vimsvc/auth/roles | awk '/ name =/ {print $3}'| sed 's/,//;s/"//g ' | sort | grep -v View | grep -v Anonymous >$srvinfopath/locroles
   
   debmsg "$ls   get local user"
   awk  -F : '{print $1}' /etc/passwd | sort >$srvinfopath/locusers
   
   debmsg "$ls   get service config status"
   chkconfig -l >$srvinfopath/serviceconf
   
   
   
   vmc=$(vim-cmd vmsvc/getallvms | wc -l)
   if [ $vmc -eq 1 ]; then
      debmsg "$ls   no vms found"
      if [ -f $srvinfopath/vms ]; then
         debmsg "$ls   delete existing info"
         rm -f $srvinfopath/vms
      fi
   else
      debmsg "$ls   detect vms - list it"
      vim-cmd vmsvc/getallvms >$srvinfopath/vms
   fi
      
   
   if [ -f $logfile ]; then
      debmsg "$ls   copy actual logfile to server"
      cat $logfile >$srvinfopath/instlog
   else
      warnmsg "$ls   no $logfile exist ?"
   fi
   
fi

if [ $mounted -eq 0 ]; then
   infmsg "$ls  vi temp nfs was not mounted at start - unmount now"
   . /store/fsi/fsiumount
else
   debmsg "$ls  vi temp nfs was mounted at start - leave it"
fi
   

infmsg "$ls End $progname $ver - rc=$retc"
exit $retc
   

